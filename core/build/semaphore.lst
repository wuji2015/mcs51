                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (May  7 2016) (Linux)
                                      4 ; This file was generated Wed Sep 21 13:59:24 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module semaphore
                                      7 	.optsdcc -mmcs51 --model-large
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _release_semaphore
                                     13 	.globl _get_semaphore
                                     14 	.globl _semaphore_init
                                     15 	.globl _display
                                     16 	.globl _schedule
                                     17 	.globl _CF
                                     18 	.globl _CR
                                     19 	.globl _CCF1
                                     20 	.globl _CCF0
                                     21 	.globl _TF2
                                     22 	.globl _EXF2
                                     23 	.globl _RCLK
                                     24 	.globl _TCLK
                                     25 	.globl _EXEN2
                                     26 	.globl _TR2
                                     27 	.globl _C_T2
                                     28 	.globl _CP_RL2
                                     29 	.globl _T2CON_7
                                     30 	.globl _T2CON_6
                                     31 	.globl _T2CON_5
                                     32 	.globl _T2CON_4
                                     33 	.globl _T2CON_3
                                     34 	.globl _T2CON_2
                                     35 	.globl _T2CON_1
                                     36 	.globl _T2CON_0
                                     37 	.globl _PT2
                                     38 	.globl _ET2
                                     39 	.globl _CY
                                     40 	.globl _AC
                                     41 	.globl _F0
                                     42 	.globl _RS1
                                     43 	.globl _RS0
                                     44 	.globl _OV
                                     45 	.globl _F1
                                     46 	.globl _P
                                     47 	.globl _PS
                                     48 	.globl _PT1
                                     49 	.globl _PX1
                                     50 	.globl _PT0
                                     51 	.globl _PX0
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD
                                     59 	.globl _RXD
                                     60 	.globl _P3_7
                                     61 	.globl _P3_6
                                     62 	.globl _P3_5
                                     63 	.globl _P3_4
                                     64 	.globl _P3_3
                                     65 	.globl _P3_2
                                     66 	.globl _P3_1
                                     67 	.globl _P3_0
                                     68 	.globl _EA
                                     69 	.globl _ES
                                     70 	.globl _ET1
                                     71 	.globl _EX1
                                     72 	.globl _ET0
                                     73 	.globl _EX0
                                     74 	.globl _P2_7
                                     75 	.globl _P2_6
                                     76 	.globl _P2_5
                                     77 	.globl _P2_4
                                     78 	.globl _P2_3
                                     79 	.globl _P2_2
                                     80 	.globl _P2_1
                                     81 	.globl _P2_0
                                     82 	.globl _SM0
                                     83 	.globl _SM1
                                     84 	.globl _SM2
                                     85 	.globl _REN
                                     86 	.globl _TB8
                                     87 	.globl _RB8
                                     88 	.globl _TI
                                     89 	.globl _RI
                                     90 	.globl _P1_7
                                     91 	.globl _P1_6
                                     92 	.globl _P1_5
                                     93 	.globl _P1_4
                                     94 	.globl _P1_3
                                     95 	.globl _P1_2
                                     96 	.globl _P1_1
                                     97 	.globl _P1_0
                                     98 	.globl _TF1
                                     99 	.globl _TR1
                                    100 	.globl _TF0
                                    101 	.globl _TR0
                                    102 	.globl _IE1
                                    103 	.globl _IT1
                                    104 	.globl _IE0
                                    105 	.globl _IT0
                                    106 	.globl _P0_7
                                    107 	.globl _P0_6
                                    108 	.globl _P0_5
                                    109 	.globl _P0_4
                                    110 	.globl _P0_3
                                    111 	.globl _P0_2
                                    112 	.globl _P0_1
                                    113 	.globl _P0_0
                                    114 	.globl _PCA_PWM1
                                    115 	.globl _PCA_PWM0
                                    116 	.globl _CCAP1H
                                    117 	.globl _CCAP1L
                                    118 	.globl _CCAP0H
                                    119 	.globl _CCAP0L
                                    120 	.globl _CH
                                    121 	.globl _CL
                                    122 	.globl _CCAPM1
                                    123 	.globl _CCAPM0
                                    124 	.globl _CMOD
                                    125 	.globl _CCON
                                    126 	.globl _WAKE_CLKO
                                    127 	.globl _BRT
                                    128 	.globl _IE2
                                    129 	.globl _S2BUF
                                    130 	.globl _S2CON
                                    131 	.globl _AUXR1
                                    132 	.globl _AUXR
                                    133 	.globl _TH2
                                    134 	.globl _TL2
                                    135 	.globl _RCAP2H
                                    136 	.globl _RCAP2L
                                    137 	.globl _T2CON
                                    138 	.globl _B
                                    139 	.globl _ACC
                                    140 	.globl _PSW
                                    141 	.globl _IP
                                    142 	.globl _P3
                                    143 	.globl _IE
                                    144 	.globl _P2
                                    145 	.globl _SBUF
                                    146 	.globl _SCON
                                    147 	.globl _P1
                                    148 	.globl _TH1
                                    149 	.globl _TH0
                                    150 	.globl _TL1
                                    151 	.globl _TL0
                                    152 	.globl _TMOD
                                    153 	.globl _TCON
                                    154 	.globl _PCON
                                    155 	.globl _DPH
                                    156 	.globl _DPL
                                    157 	.globl _SP
                                    158 	.globl _P0
                                    159 	.globl _ready_list
                                    160 	.globl _semaphore
                                    161 ;--------------------------------------------------------
                                    162 ; special function registers
                                    163 ;--------------------------------------------------------
                                    164 	.area RSEG    (ABS,DATA)
      000000                        165 	.org 0x0000
                           000080   166 _P0	=	0x0080
                           000081   167 _SP	=	0x0081
                           000082   168 _DPL	=	0x0082
                           000083   169 _DPH	=	0x0083
                           000087   170 _PCON	=	0x0087
                           000088   171 _TCON	=	0x0088
                           000089   172 _TMOD	=	0x0089
                           00008A   173 _TL0	=	0x008a
                           00008B   174 _TL1	=	0x008b
                           00008C   175 _TH0	=	0x008c
                           00008D   176 _TH1	=	0x008d
                           000090   177 _P1	=	0x0090
                           000098   178 _SCON	=	0x0098
                           000099   179 _SBUF	=	0x0099
                           0000A0   180 _P2	=	0x00a0
                           0000A8   181 _IE	=	0x00a8
                           0000B0   182 _P3	=	0x00b0
                           0000B8   183 _IP	=	0x00b8
                           0000D0   184 _PSW	=	0x00d0
                           0000E0   185 _ACC	=	0x00e0
                           0000F0   186 _B	=	0x00f0
                           0000C8   187 _T2CON	=	0x00c8
                           0000CA   188 _RCAP2L	=	0x00ca
                           0000CB   189 _RCAP2H	=	0x00cb
                           0000CC   190 _TL2	=	0x00cc
                           0000CD   191 _TH2	=	0x00cd
                           00008E   192 _AUXR	=	0x008e
                           0000A2   193 _AUXR1	=	0x00a2
                           00009A   194 _S2CON	=	0x009a
                           00009B   195 _S2BUF	=	0x009b
                           0000AF   196 _IE2	=	0x00af
                           00009C   197 _BRT	=	0x009c
                           00008F   198 _WAKE_CLKO	=	0x008f
                           0000D8   199 _CCON	=	0x00d8
                           0000D9   200 _CMOD	=	0x00d9
                           0000DA   201 _CCAPM0	=	0x00da
                           0000DB   202 _CCAPM1	=	0x00db
                           0000E9   203 _CL	=	0x00e9
                           0000F9   204 _CH	=	0x00f9
                           0000EA   205 _CCAP0L	=	0x00ea
                           0000FA   206 _CCAP0H	=	0x00fa
                           0000EB   207 _CCAP1L	=	0x00eb
                           0000FB   208 _CCAP1H	=	0x00fb
                           0000F2   209 _PCA_PWM0	=	0x00f2
                           0000F3   210 _PCA_PWM1	=	0x00f3
                                    211 ;--------------------------------------------------------
                                    212 ; special function bits
                                    213 ;--------------------------------------------------------
                                    214 	.area RSEG    (ABS,DATA)
      000000                        215 	.org 0x0000
                           000080   216 _P0_0	=	0x0080
                           000081   217 _P0_1	=	0x0081
                           000082   218 _P0_2	=	0x0082
                           000083   219 _P0_3	=	0x0083
                           000084   220 _P0_4	=	0x0084
                           000085   221 _P0_5	=	0x0085
                           000086   222 _P0_6	=	0x0086
                           000087   223 _P0_7	=	0x0087
                           000088   224 _IT0	=	0x0088
                           000089   225 _IE0	=	0x0089
                           00008A   226 _IT1	=	0x008a
                           00008B   227 _IE1	=	0x008b
                           00008C   228 _TR0	=	0x008c
                           00008D   229 _TF0	=	0x008d
                           00008E   230 _TR1	=	0x008e
                           00008F   231 _TF1	=	0x008f
                           000090   232 _P1_0	=	0x0090
                           000091   233 _P1_1	=	0x0091
                           000092   234 _P1_2	=	0x0092
                           000093   235 _P1_3	=	0x0093
                           000094   236 _P1_4	=	0x0094
                           000095   237 _P1_5	=	0x0095
                           000096   238 _P1_6	=	0x0096
                           000097   239 _P1_7	=	0x0097
                           000098   240 _RI	=	0x0098
                           000099   241 _TI	=	0x0099
                           00009A   242 _RB8	=	0x009a
                           00009B   243 _TB8	=	0x009b
                           00009C   244 _REN	=	0x009c
                           00009D   245 _SM2	=	0x009d
                           00009E   246 _SM1	=	0x009e
                           00009F   247 _SM0	=	0x009f
                           0000A0   248 _P2_0	=	0x00a0
                           0000A1   249 _P2_1	=	0x00a1
                           0000A2   250 _P2_2	=	0x00a2
                           0000A3   251 _P2_3	=	0x00a3
                           0000A4   252 _P2_4	=	0x00a4
                           0000A5   253 _P2_5	=	0x00a5
                           0000A6   254 _P2_6	=	0x00a6
                           0000A7   255 _P2_7	=	0x00a7
                           0000A8   256 _EX0	=	0x00a8
                           0000A9   257 _ET0	=	0x00a9
                           0000AA   258 _EX1	=	0x00aa
                           0000AB   259 _ET1	=	0x00ab
                           0000AC   260 _ES	=	0x00ac
                           0000AF   261 _EA	=	0x00af
                           0000B0   262 _P3_0	=	0x00b0
                           0000B1   263 _P3_1	=	0x00b1
                           0000B2   264 _P3_2	=	0x00b2
                           0000B3   265 _P3_3	=	0x00b3
                           0000B4   266 _P3_4	=	0x00b4
                           0000B5   267 _P3_5	=	0x00b5
                           0000B6   268 _P3_6	=	0x00b6
                           0000B7   269 _P3_7	=	0x00b7
                           0000B0   270 _RXD	=	0x00b0
                           0000B1   271 _TXD	=	0x00b1
                           0000B2   272 _INT0	=	0x00b2
                           0000B3   273 _INT1	=	0x00b3
                           0000B4   274 _T0	=	0x00b4
                           0000B5   275 _T1	=	0x00b5
                           0000B6   276 _WR	=	0x00b6
                           0000B7   277 _RD	=	0x00b7
                           0000B8   278 _PX0	=	0x00b8
                           0000B9   279 _PT0	=	0x00b9
                           0000BA   280 _PX1	=	0x00ba
                           0000BB   281 _PT1	=	0x00bb
                           0000BC   282 _PS	=	0x00bc
                           0000D0   283 _P	=	0x00d0
                           0000D1   284 _F1	=	0x00d1
                           0000D2   285 _OV	=	0x00d2
                           0000D3   286 _RS0	=	0x00d3
                           0000D4   287 _RS1	=	0x00d4
                           0000D5   288 _F0	=	0x00d5
                           0000D6   289 _AC	=	0x00d6
                           0000D7   290 _CY	=	0x00d7
                           0000AD   291 _ET2	=	0x00ad
                           0000BD   292 _PT2	=	0x00bd
                           0000C8   293 _T2CON_0	=	0x00c8
                           0000C9   294 _T2CON_1	=	0x00c9
                           0000CA   295 _T2CON_2	=	0x00ca
                           0000CB   296 _T2CON_3	=	0x00cb
                           0000CC   297 _T2CON_4	=	0x00cc
                           0000CD   298 _T2CON_5	=	0x00cd
                           0000CE   299 _T2CON_6	=	0x00ce
                           0000CF   300 _T2CON_7	=	0x00cf
                           0000C8   301 _CP_RL2	=	0x00c8
                           0000C9   302 _C_T2	=	0x00c9
                           0000CA   303 _TR2	=	0x00ca
                           0000CB   304 _EXEN2	=	0x00cb
                           0000CC   305 _TCLK	=	0x00cc
                           0000CD   306 _RCLK	=	0x00cd
                           0000CE   307 _EXF2	=	0x00ce
                           0000CF   308 _TF2	=	0x00cf
                           0000D8   309 _CCF0	=	0x00d8
                           0000D9   310 _CCF1	=	0x00d9
                           0000DE   311 _CR	=	0x00de
                           0000DF   312 _CF	=	0x00df
                                    313 ;--------------------------------------------------------
                                    314 ; overlayable register banks
                                    315 ;--------------------------------------------------------
                                    316 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        317 	.ds 8
                                    318 ;--------------------------------------------------------
                                    319 ; internal ram data
                                    320 ;--------------------------------------------------------
                                    321 	.area DSEG    (DATA)
                                    322 ;--------------------------------------------------------
                                    323 ; overlayable items in internal ram 
                                    324 ;--------------------------------------------------------
                                    325 ;--------------------------------------------------------
                                    326 ; indirectly addressable internal ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area ISEG    (DATA)
                                    329 ;--------------------------------------------------------
                                    330 ; absolute internal ram data
                                    331 ;--------------------------------------------------------
                                    332 	.area IABS    (ABS,DATA)
                                    333 	.area IABS    (ABS,DATA)
                                    334 ;--------------------------------------------------------
                                    335 ; bit data
                                    336 ;--------------------------------------------------------
                                    337 	.area BSEG    (BIT)
                                    338 ;--------------------------------------------------------
                                    339 ; paged external ram data
                                    340 ;--------------------------------------------------------
                                    341 	.area PSEG    (PAG,XDATA)
                                    342 ;--------------------------------------------------------
                                    343 ; external ram data
                                    344 ;--------------------------------------------------------
                                    345 	.area XSEG    (XDATA)
      000000                        346 _semaphore_init_n_1_16:
      000000                        347 	.ds 2
      000002                        348 _get_semaphore_n_1_18:
      000002                        349 	.ds 2
      000004                        350 _release_semaphore_n_1_22:
      000004                        351 	.ds 2
                                    352 ;--------------------------------------------------------
                                    353 ; absolute external ram data
                                    354 ;--------------------------------------------------------
                                    355 	.area XABS    (ABS,XDATA)
                                    356 ;--------------------------------------------------------
                                    357 ; external initialized ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area XISEG   (XDATA)
      000000                        360 _semaphore::
      000000                        361 	.ds 16
      000010                        362 _ready_list::
      000010                        363 	.ds 16
                                    364 	.area HOME    (CODE)
                                    365 	.area GSINIT0 (CODE)
                                    366 	.area GSINIT1 (CODE)
                                    367 	.area GSINIT2 (CODE)
                                    368 	.area GSINIT3 (CODE)
                                    369 	.area GSINIT4 (CODE)
                                    370 	.area GSINIT5 (CODE)
                                    371 	.area GSINIT  (CODE)
                                    372 	.area GSFINAL (CODE)
                                    373 	.area CSEG    (CODE)
                                    374 ;--------------------------------------------------------
                                    375 ; global & static initialisations
                                    376 ;--------------------------------------------------------
                                    377 	.area HOME    (CODE)
                                    378 	.area GSINIT  (CODE)
                                    379 	.area GSFINAL (CODE)
                                    380 	.area GSINIT  (CODE)
                                    381 ;--------------------------------------------------------
                                    382 ; Home
                                    383 ;--------------------------------------------------------
                                    384 	.area HOME    (CODE)
                                    385 	.area HOME    (CODE)
                                    386 ;--------------------------------------------------------
                                    387 ; code
                                    388 ;--------------------------------------------------------
                                    389 	.area CSEG    (CODE)
                                    390 ;------------------------------------------------------------
                                    391 ;Allocation info for local variables in function 'semaphore_init'
                                    392 ;------------------------------------------------------------
                                    393 ;n                         Allocated with name '_semaphore_init_n_1_16'
                                    394 ;------------------------------------------------------------
                                    395 ;	semaphore.c:8: void semaphore_init(uint n)	//n为将要初始化的信号量
                                    396 ;	-----------------------------------------
                                    397 ;	 function semaphore_init
                                    398 ;	-----------------------------------------
      000000                        399 _semaphore_init:
                           000007   400 	ar7 = 0x07
                           000006   401 	ar6 = 0x06
                           000005   402 	ar5 = 0x05
                           000004   403 	ar4 = 0x04
                           000003   404 	ar3 = 0x03
                           000002   405 	ar2 = 0x02
                           000001   406 	ar1 = 0x01
                           000000   407 	ar0 = 0x00
      000000 AF 83            [24]  408 	mov	r7,dph
      000002 E5 82            [12]  409 	mov	a,dpl
      000004 90r00r00         [24]  410 	mov	dptr,#_semaphore_init_n_1_16
      000007 F0               [24]  411 	movx	@dptr,a
      000008 EF               [12]  412 	mov	a,r7
      000009 A3               [24]  413 	inc	dptr
      00000A F0               [24]  414 	movx	@dptr,a
                                    415 ;	semaphore.c:10: semaphore[n]=1;
      00000B 90r00r00         [24]  416 	mov	dptr,#_semaphore_init_n_1_16
      00000E E0               [24]  417 	movx	a,@dptr
      00000F FE               [12]  418 	mov	r6,a
      000010 A3               [24]  419 	inc	dptr
      000011 E0               [24]  420 	movx	a,@dptr
      000012 FF               [12]  421 	mov	r7,a
      000013 EE               [12]  422 	mov	a,r6
      000014 24r00            [12]  423 	add	a,#_semaphore
      000016 F5 82            [12]  424 	mov	dpl,a
      000018 EF               [12]  425 	mov	a,r7
      000019 34s00            [12]  426 	addc	a,#(_semaphore >> 8)
      00001B F5 83            [12]  427 	mov	dph,a
      00001D 74 01            [12]  428 	mov	a,#0x01
      00001F F0               [24]  429 	movx	@dptr,a
                                    430 ;	semaphore.c:11: ready_list[n]=0;
      000020 EE               [12]  431 	mov	a,r6
      000021 24r10            [12]  432 	add	a,#_ready_list
      000023 F5 82            [12]  433 	mov	dpl,a
      000025 EF               [12]  434 	mov	a,r7
      000026 34s00            [12]  435 	addc	a,#(_ready_list >> 8)
      000028 F5 83            [12]  436 	mov	dph,a
      00002A E4               [12]  437 	clr	a
      00002B F0               [24]  438 	movx	@dptr,a
                                    439 ;	semaphore.c:12: return;
      00002C 22               [24]  440 	ret
                                    441 ;------------------------------------------------------------
                                    442 ;Allocation info for local variables in function 'get_semaphore'
                                    443 ;------------------------------------------------------------
                                    444 ;n                         Allocated with name '_get_semaphore_n_1_18'
                                    445 ;------------------------------------------------------------
                                    446 ;	semaphore.c:17: void get_semaphore(uint n)
                                    447 ;	-----------------------------------------
                                    448 ;	 function get_semaphore
                                    449 ;	-----------------------------------------
      00002D                        450 _get_semaphore:
      00002D AF 83            [24]  451 	mov	r7,dph
      00002F E5 82            [12]  452 	mov	a,dpl
      000031 90r00r02         [24]  453 	mov	dptr,#_get_semaphore_n_1_18
      000034 F0               [24]  454 	movx	@dptr,a
      000035 EF               [12]  455 	mov	a,r7
      000036 A3               [24]  456 	inc	dptr
      000037 F0               [24]  457 	movx	@dptr,a
                                    458 ;	semaphore.c:19: if(n>16){	//防止n>16
      000038 90r00r02         [24]  459 	mov	dptr,#_get_semaphore_n_1_18
      00003B E0               [24]  460 	movx	a,@dptr
      00003C FE               [12]  461 	mov	r6,a
      00003D A3               [24]  462 	inc	dptr
      00003E E0               [24]  463 	movx	a,@dptr
      00003F FF               [12]  464 	mov	r7,a
      000040 C3               [12]  465 	clr	c
      000041 74 10            [12]  466 	mov	a,#0x10
      000043 9E               [12]  467 	subb	a,r6
      000044 E4               [12]  468 	clr	a
      000045 9F               [12]  469 	subb	a,r7
      000046 50 17            [24]  470 	jnc	00105$
                                    471 ;	semaphore.c:20: display("n>16,in get_semaphore()",n);
      000048 90r00r02         [24]  472 	mov	dptr,#_get_semaphore_n_1_18
      00004B E0               [24]  473 	movx	a,@dptr
      00004C FE               [12]  474 	mov	r6,a
      00004D A3               [24]  475 	inc	dptr
      00004E E0               [24]  476 	movx	a,@dptr
      00004F 90r00r00         [24]  477 	mov	dptr,#_display_PARM_2
      000052 EE               [12]  478 	mov	a,r6
      000053 F0               [24]  479 	movx	@dptr,a
      000054 90r00r00         [24]  480 	mov	dptr,#___str_0
      000057 75 F0 80         [24]  481 	mov	b,#0x80
      00005A 12r00r00         [24]  482 	lcall	_display
                                    483 ;	semaphore.c:21: while(1);
      00005D                        484 00102$:
      00005D 80 FE            [24]  485 	sjmp	00102$
      00005F                        486 00105$:
                                    487 ;	semaphore.c:23: if(semaphore[n]==1){
      00005F 90r00r02         [24]  488 	mov	dptr,#_get_semaphore_n_1_18
      000062 E0               [24]  489 	movx	a,@dptr
      000063 FE               [12]  490 	mov	r6,a
      000064 A3               [24]  491 	inc	dptr
      000065 E0               [24]  492 	movx	a,@dptr
      000066 FF               [12]  493 	mov	r7,a
      000067 EE               [12]  494 	mov	a,r6
      000068 24r00            [12]  495 	add	a,#_semaphore
      00006A F5 82            [12]  496 	mov	dpl,a
      00006C EF               [12]  497 	mov	a,r7
      00006D 34s00            [12]  498 	addc	a,#(_semaphore >> 8)
      00006F F5 83            [12]  499 	mov	dph,a
      000071 E0               [24]  500 	movx	a,@dptr
      000072 FF               [12]  501 	mov	r7,a
      000073 BF 01 15         [24]  502 	cjne	r7,#0x01,00107$
                                    503 ;	semaphore.c:24: semaphore[n]=0;
      000076 90r00r02         [24]  504 	mov	dptr,#_get_semaphore_n_1_18
      000079 E0               [24]  505 	movx	a,@dptr
      00007A FE               [12]  506 	mov	r6,a
      00007B A3               [24]  507 	inc	dptr
      00007C E0               [24]  508 	movx	a,@dptr
      00007D FF               [12]  509 	mov	r7,a
      00007E EE               [12]  510 	mov	a,r6
      00007F 24r00            [12]  511 	add	a,#_semaphore
      000081 F5 82            [12]  512 	mov	dpl,a
      000083 EF               [12]  513 	mov	a,r7
      000084 34s00            [12]  514 	addc	a,#(_semaphore >> 8)
      000086 F5 83            [12]  515 	mov	dph,a
      000088 E4               [12]  516 	clr	a
      000089 F0               [24]  517 	movx	@dptr,a
                                    518 ;	semaphore.c:25: return;	//成功取得信号量,否则进程阻塞
      00008A 22               [24]  519 	ret
      00008B                        520 00107$:
                                    521 ;	semaphore.c:27: EA=0;
      00008B C2 AF            [12]  522 	clr	_EA
                                    523 ;	semaphore.c:28: READY=READY&(~MASK[CUR]);
      00008D 90r00r00         [24]  524 	mov	dptr,#_CUR
      000090 E0               [24]  525 	movx	a,@dptr
      000091 FE               [12]  526 	mov	r6,a
      000092 A3               [24]  527 	inc	dptr
      000093 E0               [24]  528 	movx	a,@dptr
      000094 CE               [12]  529 	xch	a,r6
      000095 25 E0            [12]  530 	add	a,acc
      000097 CE               [12]  531 	xch	a,r6
      000098 33               [12]  532 	rlc	a
      000099 FF               [12]  533 	mov	r7,a
      00009A EE               [12]  534 	mov	a,r6
      00009B 24r00            [12]  535 	add	a,#_MASK
      00009D F5 82            [12]  536 	mov	dpl,a
      00009F EF               [12]  537 	mov	a,r7
      0000A0 34s00            [12]  538 	addc	a,#(_MASK >> 8)
      0000A2 F5 83            [12]  539 	mov	dph,a
      0000A4 E4               [12]  540 	clr	a
      0000A5 93               [24]  541 	movc	a,@a+dptr
      0000A6 FE               [12]  542 	mov	r6,a
      0000A7 A3               [24]  543 	inc	dptr
      0000A8 E4               [12]  544 	clr	a
      0000A9 93               [24]  545 	movc	a,@a+dptr
      0000AA FF               [12]  546 	mov	r7,a
      0000AB EE               [12]  547 	mov	a,r6
      0000AC F4               [12]  548 	cpl	a
      0000AD FC               [12]  549 	mov	r4,a
      0000AE EF               [12]  550 	mov	a,r7
      0000AF F4               [12]  551 	cpl	a
      0000B0 FD               [12]  552 	mov	r5,a
      0000B1 90r00r00         [24]  553 	mov	dptr,#_READY
      0000B4 E0               [24]  554 	movx	a,@dptr
      0000B5 FA               [12]  555 	mov	r2,a
      0000B6 A3               [24]  556 	inc	dptr
      0000B7 E0               [24]  557 	movx	a,@dptr
      0000B8 FB               [12]  558 	mov	r3,a
      0000B9 90r00r00         [24]  559 	mov	dptr,#_READY
      0000BC EC               [12]  560 	mov	a,r4
      0000BD 5A               [12]  561 	anl	a,r2
      0000BE F0               [24]  562 	movx	@dptr,a
      0000BF ED               [12]  563 	mov	a,r5
      0000C0 5B               [12]  564 	anl	a,r3
      0000C1 A3               [24]  565 	inc	dptr
      0000C2 F0               [24]  566 	movx	@dptr,a
                                    567 ;	semaphore.c:29: ready_list[n]|=MASK[CUR];
      0000C3 90r00r02         [24]  568 	mov	dptr,#_get_semaphore_n_1_18
      0000C6 E0               [24]  569 	movx	a,@dptr
      0000C7 FC               [12]  570 	mov	r4,a
      0000C8 A3               [24]  571 	inc	dptr
      0000C9 E0               [24]  572 	movx	a,@dptr
      0000CA FD               [12]  573 	mov	r5,a
      0000CB EC               [12]  574 	mov	a,r4
      0000CC 24r10            [12]  575 	add	a,#_ready_list
      0000CE FC               [12]  576 	mov	r4,a
      0000CF ED               [12]  577 	mov	a,r5
      0000D0 34s00            [12]  578 	addc	a,#(_ready_list >> 8)
      0000D2 FD               [12]  579 	mov	r5,a
      0000D3 8C 82            [24]  580 	mov	dpl,r4
      0000D5 8D 83            [24]  581 	mov	dph,r5
      0000D7 E0               [24]  582 	movx	a,@dptr
      0000D8 7A 00            [12]  583 	mov	r2,#0x00
      0000DA 42 06            [12]  584 	orl	ar6,a
      0000DC EA               [12]  585 	mov	a,r2
      0000DD 42 07            [12]  586 	orl	ar7,a
      0000DF 8C 82            [24]  587 	mov	dpl,r4
      0000E1 8D 83            [24]  588 	mov	dph,r5
      0000E3 EE               [12]  589 	mov	a,r6
      0000E4 F0               [24]  590 	movx	@dptr,a
                                    591 ;	semaphore.c:30: EA=1;
      0000E5 D2 AF            [12]  592 	setb	_EA
                                    593 ;	semaphore.c:31: schedule();
                                    594 ;	semaphore.c:32: return;
      0000E7 02r00r00         [24]  595 	ljmp	_schedule
                                    596 ;------------------------------------------------------------
                                    597 ;Allocation info for local variables in function 'release_semaphore'
                                    598 ;------------------------------------------------------------
                                    599 ;n                         Allocated with name '_release_semaphore_n_1_22'
                                    600 ;hg                        Allocated with name '_release_semaphore_hg_1_23'
                                    601 ;------------------------------------------------------------
                                    602 ;	semaphore.c:37: void release_semaphore(uint n)
                                    603 ;	-----------------------------------------
                                    604 ;	 function release_semaphore
                                    605 ;	-----------------------------------------
      0000EA                        606 _release_semaphore:
      0000EA AF 83            [24]  607 	mov	r7,dph
      0000EC E5 82            [12]  608 	mov	a,dpl
      0000EE 90r00r04         [24]  609 	mov	dptr,#_release_semaphore_n_1_22
      0000F1 F0               [24]  610 	movx	@dptr,a
      0000F2 EF               [12]  611 	mov	a,r7
      0000F3 A3               [24]  612 	inc	dptr
      0000F4 F0               [24]  613 	movx	@dptr,a
                                    614 ;	semaphore.c:40: if(n>16){	//防止n>16
      0000F5 90r00r04         [24]  615 	mov	dptr,#_release_semaphore_n_1_22
      0000F8 E0               [24]  616 	movx	a,@dptr
      0000F9 FE               [12]  617 	mov	r6,a
      0000FA A3               [24]  618 	inc	dptr
      0000FB E0               [24]  619 	movx	a,@dptr
      0000FC FF               [12]  620 	mov	r7,a
      0000FD C3               [12]  621 	clr	c
      0000FE 74 10            [12]  622 	mov	a,#0x10
      000100 9E               [12]  623 	subb	a,r6
      000101 E4               [12]  624 	clr	a
      000102 9F               [12]  625 	subb	a,r7
      000103 40 02            [24]  626 	jc	00104$
      000105 80 17            [24]  627 	sjmp	00105$
      000107                        628 00104$:
                                    629 ;	semaphore.c:41: display("n>16,in release_semaphore()",n);
      000107 90r00r04         [24]  630 	mov	dptr,#_release_semaphore_n_1_22
      00010A E0               [24]  631 	movx	a,@dptr
      00010B FE               [12]  632 	mov	r6,a
      00010C A3               [24]  633 	inc	dptr
      00010D E0               [24]  634 	movx	a,@dptr
      00010E 90r00r00         [24]  635 	mov	dptr,#_display_PARM_2
      000111 EE               [12]  636 	mov	a,r6
      000112 F0               [24]  637 	movx	@dptr,a
      000113 90r00r18         [24]  638 	mov	dptr,#___str_1
      000116 75 F0 80         [24]  639 	mov	b,#0x80
      000119 12r00r00         [24]  640 	lcall	_display
                                    641 ;	semaphore.c:42: while(1);
      00011C                        642 00102$:
      00011C 80 FE            [24]  643 	sjmp	00102$
      00011E                        644 00105$:
                                    645 ;	semaphore.c:44: if(semaphore[n]==0){	
      00011E 90r00r04         [24]  646 	mov	dptr,#_release_semaphore_n_1_22
      000121 E0               [24]  647 	movx	a,@dptr
      000122 FE               [12]  648 	mov	r6,a
      000123 A3               [24]  649 	inc	dptr
      000124 E0               [24]  650 	movx	a,@dptr
      000125 FF               [12]  651 	mov	r7,a
      000126 EE               [12]  652 	mov	a,r6
      000127 24r00            [12]  653 	add	a,#_semaphore
      000129 FE               [12]  654 	mov	r6,a
      00012A EF               [12]  655 	mov	a,r7
      00012B 34s00            [12]  656 	addc	a,#(_semaphore >> 8)
      00012D FF               [12]  657 	mov	r7,a
      00012E 8E 82            [24]  658 	mov	dpl,r6
      000130 8F 83            [24]  659 	mov	dph,r7
      000132 E0               [24]  660 	movx	a,@dptr
      000133 60 03            [24]  661 	jz	00120$
      000135 02r01rD5         [24]  662 	ljmp	00110$
      000138                        663 00120$:
                                    664 ;	semaphore.c:45: EA=0;
      000138 C2 AF            [12]  665 	clr	_EA
                                    666 ;	semaphore.c:46: if(ready_list[n]==0){
      00013A 90r00r04         [24]  667 	mov	dptr,#_release_semaphore_n_1_22
      00013D E0               [24]  668 	movx	a,@dptr
      00013E FE               [12]  669 	mov	r6,a
      00013F A3               [24]  670 	inc	dptr
      000140 E0               [24]  671 	movx	a,@dptr
      000141 FF               [12]  672 	mov	r7,a
      000142 EE               [12]  673 	mov	a,r6
      000143 24r10            [12]  674 	add	a,#_ready_list
      000145 FE               [12]  675 	mov	r6,a
      000146 EF               [12]  676 	mov	a,r7
      000147 34s00            [12]  677 	addc	a,#(_ready_list >> 8)
      000149 FF               [12]  678 	mov	r7,a
      00014A 8E 82            [24]  679 	mov	dpl,r6
      00014C 8F 83            [24]  680 	mov	dph,r7
      00014E E0               [24]  681 	movx	a,@dptr
      00014F 70 18            [24]  682 	jnz	00107$
                                    683 ;	semaphore.c:47: semaphore[n]=1;		//为零且无等待任务,信号量置1
      000151 90r00r04         [24]  684 	mov	dptr,#_release_semaphore_n_1_22
      000154 E0               [24]  685 	movx	a,@dptr
      000155 FE               [12]  686 	mov	r6,a
      000156 A3               [24]  687 	inc	dptr
      000157 E0               [24]  688 	movx	a,@dptr
      000158 FF               [12]  689 	mov	r7,a
      000159 EE               [12]  690 	mov	a,r6
      00015A 24r00            [12]  691 	add	a,#_semaphore
      00015C F5 82            [12]  692 	mov	dpl,a
      00015E EF               [12]  693 	mov	a,r7
      00015F 34s00            [12]  694 	addc	a,#(_semaphore >> 8)
      000161 F5 83            [12]  695 	mov	dph,a
      000163 74 01            [12]  696 	mov	a,#0x01
      000165 F0               [24]  697 	movx	@dptr,a
                                    698 ;	semaphore.c:48: EA=1;
      000166 D2 AF            [12]  699 	setb	_EA
                                    700 ;	semaphore.c:49: return;
      000168 22               [24]  701 	ret
      000169                        702 00107$:
                                    703 ;	semaphore.c:51: hg=READYMAP[ready_list[n]];	//有人任务阻塞,取最高级任务调度
      000169 90r00r04         [24]  704 	mov	dptr,#_release_semaphore_n_1_22
      00016C E0               [24]  705 	movx	a,@dptr
      00016D FE               [12]  706 	mov	r6,a
      00016E A3               [24]  707 	inc	dptr
      00016F E0               [24]  708 	movx	a,@dptr
      000170 FF               [12]  709 	mov	r7,a
      000171 EE               [12]  710 	mov	a,r6
      000172 24r10            [12]  711 	add	a,#_ready_list
      000174 FE               [12]  712 	mov	r6,a
      000175 EF               [12]  713 	mov	a,r7
      000176 34s00            [12]  714 	addc	a,#(_ready_list >> 8)
      000178 FF               [12]  715 	mov	r7,a
      000179 8E 82            [24]  716 	mov	dpl,r6
      00017B 8F 83            [24]  717 	mov	dph,r7
      00017D E0               [24]  718 	movx	a,@dptr
      00017E FD               [12]  719 	mov	r5,a
      00017F 75 F0 02         [24]  720 	mov	b,#0x02
      000182 A4               [48]  721 	mul	ab
      000183 24r00            [12]  722 	add	a,#_READYMAP
      000185 F5 82            [12]  723 	mov	dpl,a
      000187 74s00            [12]  724 	mov	a,#(_READYMAP >> 8)
      000189 35 F0            [12]  725 	addc	a,b
      00018B F5 83            [12]  726 	mov	dph,a
      00018D E4               [12]  727 	clr	a
      00018E 93               [24]  728 	movc	a,@a+dptr
      00018F FB               [12]  729 	mov	r3,a
      000190 A3               [24]  730 	inc	dptr
      000191 E4               [12]  731 	clr	a
      000192 93               [24]  732 	movc	a,@a+dptr
                                    733 ;	semaphore.c:52: ready_list[n]=ready_list[n]&(~MASK[hg]);
      000193 CB               [12]  734 	xch	a,r3
      000194 25 E0            [12]  735 	add	a,acc
      000196 CB               [12]  736 	xch	a,r3
      000197 33               [12]  737 	rlc	a
      000198 FC               [12]  738 	mov	r4,a
      000199 EB               [12]  739 	mov	a,r3
      00019A 24r00            [12]  740 	add	a,#_MASK
      00019C FB               [12]  741 	mov	r3,a
      00019D EC               [12]  742 	mov	a,r4
      00019E 34s00            [12]  743 	addc	a,#(_MASK >> 8)
      0001A0 FC               [12]  744 	mov	r4,a
      0001A1 8B 82            [24]  745 	mov	dpl,r3
      0001A3 8C 83            [24]  746 	mov	dph,r4
      0001A5 E4               [12]  747 	clr	a
      0001A6 93               [24]  748 	movc	a,@a+dptr
      0001A7 F9               [12]  749 	mov	r1,a
      0001A8 A3               [24]  750 	inc	dptr
      0001A9 E4               [12]  751 	clr	a
      0001AA 93               [24]  752 	movc	a,@a+dptr
      0001AB E9               [12]  753 	mov	a,r1
      0001AC F4               [12]  754 	cpl	a
      0001AD 52 05            [12]  755 	anl	ar5,a
      0001AF 8E 82            [24]  756 	mov	dpl,r6
      0001B1 8F 83            [24]  757 	mov	dph,r7
      0001B3 ED               [12]  758 	mov	a,r5
      0001B4 F0               [24]  759 	movx	@dptr,a
                                    760 ;	semaphore.c:53: READY|=MASK[hg];
      0001B5 8B 82            [24]  761 	mov	dpl,r3
      0001B7 8C 83            [24]  762 	mov	dph,r4
      0001B9 E4               [12]  763 	clr	a
      0001BA 93               [24]  764 	movc	a,@a+dptr
      0001BB FB               [12]  765 	mov	r3,a
      0001BC A3               [24]  766 	inc	dptr
      0001BD E4               [12]  767 	clr	a
      0001BE 93               [24]  768 	movc	a,@a+dptr
      0001BF FC               [12]  769 	mov	r4,a
      0001C0 90r00r00         [24]  770 	mov	dptr,#_READY
      0001C3 E0               [24]  771 	movx	a,@dptr
      0001C4 FE               [12]  772 	mov	r6,a
      0001C5 A3               [24]  773 	inc	dptr
      0001C6 E0               [24]  774 	movx	a,@dptr
      0001C7 FF               [12]  775 	mov	r7,a
      0001C8 90r00r00         [24]  776 	mov	dptr,#_READY
      0001CB EB               [12]  777 	mov	a,r3
      0001CC 4E               [12]  778 	orl	a,r6
      0001CD F0               [24]  779 	movx	@dptr,a
      0001CE EC               [12]  780 	mov	a,r4
      0001CF 4F               [12]  781 	orl	a,r7
      0001D0 A3               [24]  782 	inc	dptr
      0001D1 F0               [24]  783 	movx	@dptr,a
                                    784 ;	semaphore.c:54: schedule();
      0001D2 12r00r00         [24]  785 	lcall	_schedule
      0001D5                        786 00110$:
                                    787 ;	semaphore.c:57: return;
      0001D5 22               [24]  788 	ret
                                    789 	.area CSEG    (CODE)
                                    790 	.area CONST   (CODE)
      000000                        791 ___str_0:
      000000 6E 3E 31 36 2C 69 6E   792 	.ascii "n>16,in get_semaphore()"
             20 67 65 74 5F 73 65
             6D 61 70 68 6F 72 65
             28 29
      000017 00                     793 	.db 0x00
      000018                        794 ___str_1:
      000018 6E 3E 31 36 2C 69 6E   795 	.ascii "n>16,in release_semaphore()"
             20 72 65 6C 65 61 73
             65 5F 73 65 6D 61 70
             68 6F 72 65 28 29
      000033 00                     796 	.db 0x00
                                    797 	.area XINIT   (CODE)
      000000                        798 __xinit__semaphore:
      000000 00                     799 	.db #0x00	; 0
      000001 00                     800 	.db 0x00
      000002 00                     801 	.db 0x00
      000003 00                     802 	.db 0x00
      000004 00                     803 	.db 0x00
      000005 00                     804 	.db 0x00
      000006 00                     805 	.db 0x00
      000007 00                     806 	.db 0x00
      000008 00                     807 	.db 0x00
      000009 00                     808 	.db 0x00
      00000A 00                     809 	.db 0x00
      00000B 00                     810 	.db 0x00
      00000C 00                     811 	.db 0x00
      00000D 00                     812 	.db 0x00
      00000E 00                     813 	.db 0x00
      00000F 00                     814 	.db 0x00
      000010                        815 __xinit__ready_list:
      000010 00                     816 	.db #0x00	; 0
      000011 00                     817 	.db 0x00
      000012 00                     818 	.db 0x00
      000013 00                     819 	.db 0x00
      000014 00                     820 	.db 0x00
      000015 00                     821 	.db 0x00
      000016 00                     822 	.db 0x00
      000017 00                     823 	.db 0x00
      000018 00                     824 	.db 0x00
      000019 00                     825 	.db 0x00
      00001A 00                     826 	.db 0x00
      00001B 00                     827 	.db 0x00
      00001C 00                     828 	.db 0x00
      00001D 00                     829 	.db 0x00
      00001E 00                     830 	.db 0x00
      00001F 00                     831 	.db 0x00
                                    832 	.area CABS    (ABS,CODE)
